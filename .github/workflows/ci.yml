name: CI

on:
  pull_request:
  push:
    branches:
      - main

env:
  CARGO_TERM_COLOR: always

jobs:
  # General TODO items:
  # - try Rust clippy (should avoid all warnings)
  test:
    strategy:
      fail-fast: false
      matrix:
        include:
          # XXX TODO ADD TESTING WITH RUST STABLE & BETA TO MATRIX HERE (NEED TO SKIP XXX TBD UNSTABLE XXX FEATURES WITH RUST STABLE & BETA)
          - rust: nightly
          - os: macos-latest
            rust: nightly
          - os: windows-latest
            rust: nightly
          - rust: nightly-2024-07-01
          - rust: nightly-2023-07-01
            test-options: --all-targets # SKIP doc tests
          - rust: nightly-2022-08-24 # MSRV (nightly)
            test-options: --all-targets # SKIP doc tests
    runs-on: ${{ matrix.os || 'ubuntu-latest' }}
    steps:
      - uses: actions/checkout@v4
      - run: rustup default ${{ matrix.rust }}
      - run: cargo test --features alloc ${{ matrix.test-options }} --verbose
        env:
          RUSTFLAGS: --cfg portable_io_unstable_all
      - run: cargo test --all-features ${{ matrix.test-options }} --verbose
        if: (!startsWith(matrix.os, 'windows'))
        env:
          RUSTFLAGS: --cfg portable_io_unstable_all

  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - rust: beta
          # XXX TODO TEST RUST STABLE WITH MACOS & WINDOWS
          - rust: stable
          - rust: '1.81' # MSRV (stable)
          - rust: nightly
          - os: macos-latest
            rust: nightly
          - os: windows-latest
            rust: nightly
          - rust: nightly-2024-07-01
          # XXX TBD SKIP CI BUILD WITH NIGHTLY PRE-2024 FOR NOW TO AVOID BUILD ISSUE WITH error_in_core FEATURE - XXX TODO RESOLVE & RE-ENABLE
          # - rust: nightly-2023-07-01
          # - rust: nightly-2022-08-24 # MSRV (nightly)
    runs-on: ${{ matrix.os || 'ubuntu-latest' }}
    steps:
      - uses: actions/checkout@v4
      - run: rustup default ${{ matrix.rust }}
      - run: cargo build --features alloc --verbose
        # XXX TODO RESOLVE WARNINGS & RE-ENABLE --deny warnings
        # env:
        #   RUSTFLAGS: --deny warnings
      - run: cargo build --all-features --verbose
        if: (startsWith(matrix.rust, 'nightly') && !startsWith(matrix.os, 'windows'))
        env:
          # XXX TODO RESOLVE WARNINGS & RE-ENABLE --deny warnings
          # RUSTFLAGS: --cfg portable_io_unstable_all --deny warnings
          RUSTFLAGS: --cfg portable_io_unstable_all
      # XXX TODO RESOLVE & RE-ENABLE:
      # - run: cargo test --features alloc --no-run
        # XXX TODO RESOLVE WARNINGS & RE-ENABLE --deny warnings
        # env:
        #   RUSTFLAGS: --deny warnings
      - run: cargo test --all-features --no-run
        if: (startsWith(matrix.rust, 'nightly') && !startsWith(matrix.os, 'windows'))
        env:
          # XXX TODO RESOLVE WARNINGS & RE-ENABLE --deny warnings
          # RUSTFLAGS: --cfg portable_io_unstable_all --deny warnings
          RUSTFLAGS: --cfg portable_io_unstable_all

  fmt:
    strategy:
      fail-fast: false
      matrix:
        include:
          - rust: stable
          - rust: nightly
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: rustup default ${{ matrix.rust }}
      - run: rustup component add rustfmt
      - run: cargo fmt --check

  doc:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: rustup default nightly
      - run: cargo doc --all-features
