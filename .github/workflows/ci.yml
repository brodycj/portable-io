name: CI

on:
  pull_request:
  push:
    branches:
      - main

env:
  CARGO_TERM_COLOR: always

jobs:
  # General TODO items:
  # - try Rust clippy (should avoid all warnings)
  test:
    strategy:
      fail-fast: false
      matrix:
        include:
          - rust: beta
          - rust: stable
          - rust: stable
            os: macos-latest
          - rust: stable
            os: windows-latest
          - rust: '1.81.0' # MSRV - stable
          - rust: nightly
          - rust: nightly
            os: macos-latest
          - rust: nightly
            os: windows-latest
          - rust: nightly-2024-07-01
          - rust: nightly-2023-07-01
            unstable-error-in-core: true # REQUIRES CFG to enable now-stable error_in_core Rust feature
            test-options: --all-targets # SKIP doc tests
          - rust: nightly-2022-08-24 # MSRV - nightly
            unstable-error-in-core: true # REQUIRES CFG to enable now-stable error_in_core Rust feature
            test-options: --all-targets # SKIP doc tests
    runs-on: ${{ matrix.os || 'ubuntu-latest' }}
    steps:
      - uses: actions/checkout@v4
      - run: rustup default ${{ matrix.rust }}
      - run: cargo test --features alloc --all-targets --verbose # SKIP doc tests with no unstable cfg option here
        if: (!matrix.unstable-error-in-core)
      - run: cargo test --features alloc ${{ matrix.test-options }} --verbose
        if: startsWith(matrix.rust, 'nightly')
        env:
          RUSTFLAGS: --cfg portable_io_unstable_all
      # NOTE: It is possible to test with --all-features but no unstable cfg option
      # (must skip doc tests, testing on Windows, and testing with older Rust nightly with error_in_core not stabilized in this case)
      - run: cargo test --all-features --all-targets --verbose # SKIP doc tests with no unstable cfg option here
        if: (!startsWith(matrix.os, 'windows') && !matrix.unstable-error-in-core)
      - run: cargo test --all-features ${{ matrix.test-options }} --verbose
        if: (startsWith(matrix.rust, 'nightly') && !startsWith(matrix.os, 'windows'))
        env:
          RUSTFLAGS: --cfg portable_io_unstable_all

  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - rust: beta
          - rust: stable
          - rust: stable
            os: macos-latest
          - rust: stable
            os: windows-latest
          - rust: '1.81.0' # MSRV - stable
          - rust: nightly
          - rust: nightly
            os: macos-latest
          - rust: nightly
            os: windows-latest
          - rust: nightly-2024-07-01
          - rust: nightly-2023-07-01
            unstable-error-in-core: true # REQUIRES CFG to enable now-stable error_in_core Rust feature
          - rust: nightly-2022-08-24 # MSRV - nightly
            unstable-error-in-core: true # REQUIRES CFG to enable now-stable error_in_core Rust feature
    runs-on: ${{ matrix.os || 'ubuntu-latest' }}
    steps:
      - uses: actions/checkout@v4
      - run: rustup default ${{ matrix.rust }}
      - run: cargo build --features alloc --verbose
        if: (!matrix.unstable-error-in-core)
        env:
          RUSTFLAGS: --deny warnings
      - run: cargo build --all-features --verbose
        if: (!startsWith(matrix.os, 'windows') && !matrix.unstable-error-in-core)
      - run: cargo build --all-features --verbose
        if: (startsWith(matrix.rust, 'nightly') && !startsWith(matrix.os, 'windows') && !matrix.unstable-error-in-core)
        env:
          RUSTFLAGS: --cfg portable_io_unstable_all --deny warnings
      - run: cargo test --features alloc --no-run
        env:
          RUSTFLAGS: --deny warnings
      - run: cargo test --all-features --no-run
        if: (!startsWith(matrix.os, 'windows') && !matrix.unstable-error-in-core)
        env:
          RUSTFLAGS: --deny warnings
      - run: cargo test --all-features --no-run
        if: (startsWith(matrix.rust, 'nightly') && !startsWith(matrix.os, 'windows'))
        env:
          RUSTFLAGS: --cfg portable_io_unstable_all --deny warnings

  fmt:
    strategy:
      fail-fast: false
      matrix:
        include:
          - rust: stable
          - rust: nightly
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: rustup default ${{ matrix.rust }}
      - run: rustup component add rustfmt
      - run: cargo fmt --check

  doc:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: rustup default nightly
      - run: cargo doc --all-features
