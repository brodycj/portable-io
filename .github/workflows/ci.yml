name: CI

on:
  pull_request:
  push:
    branches:
      - main

env:
  CARGO_TERM_COLOR: always

jobs:
  # General TODO items:
  # - try Rust clippy (should avoid all warnings)
  test:
    strategy:
      fail-fast: false
      matrix:
        include:
          - rust: beta
          - rust: stable
          - rust: stable
            os: macos-latest
          - rust: stable
            os: windows-latest
          - rust: '1.81.0' # MSRV - stable
          # ---
          - rust: nightly
          - rust: nightly
            os: macos-latest
          - rust: nightly
            os: windows-latest
          # ---
          - rust: nightly-2024-07-01
          - rust: nightly-2023-07-01
            unstable-cfg-needed: true # unstable cfg needed to enable Rust error_in_core feature (stabilized in June 2024)
            test-options: --all-targets # SKIP doc tests due to expected doc tests failure with Rust error_in_core feature & Rust nightly pre-2024-06-09
          - rust: nightly-2022-08-24 # MSRV - nightly
            unstable-cfg-needed: true # unstable cfg needed to enable Rust error_in_core feature (stabilized in June 2024)
            test-options: --all-targets # SKIP doc tests due to expected doc tests failure with Rust error_in_core feature & Rust nightly pre-2024-06-09
    runs-on: ${{ matrix.os || 'ubuntu-latest' }}
    steps:
      - uses: actions/checkout@v4
      - run: npm install --global cross-env
      - run: rustup default ${{ matrix.rust }}
      # ---
      - run: cargo test --all-targets --verbose # using --all-targets to SKIP doc tests (expected to fail with unstable cfg option not enabled)
        if: (!matrix.unstable-cfg-needed)
      - run: cross-env RUSTFLAGS="--cfg portable_io_unstable_all" cargo test ${{ matrix.test-options }} --verbose
        if: startsWith(matrix.rust, 'nightly')
      - run: cargo test --all-features --all-targets --verbose # using --all-targets to SKIP doc tests (expected to fail with unstable cfg option not enabled)
        if: (!startsWith(matrix.os, 'windows') && !matrix.unstable-cfg-needed)
      - run: cross-env RUSTFLAGS="--cfg portable_io_unstable_all" cargo test --all-features ${{ matrix.test-options }} --verbose
        if: (!startsWith(matrix.os, 'windows') && startsWith(matrix.rust, 'nightly'))

  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - rust: beta
          - rust: stable
          - rust: stable
            os: macos-latest
          - rust: stable
            os: windows-latest
          - rust: '1.81.0' # MSRV - stable
          # ---
          - rust: nightly
          - rust: nightly
            os: macos-latest
          - rust: nightly
            os: windows-latest
          # ---
          - rust: nightly-2024-07-01
          - rust: nightly-2023-07-01
            unstable-cfg-needed: true # unstable cfg needed to enable Rust error_in_core feature (stabilized in 2024)
          - rust: nightly-2022-08-24 # MSRV - nightly
            unstable-cfg-needed: true # unstable cfg needed to enable Rust error_in_core feature (stabilized in 2024)
    runs-on: ${{ matrix.os || 'ubuntu-latest' }}
    steps:
      - uses: actions/checkout@v4
      - run: npm install --global cross-env
      - run: rustup default ${{ matrix.rust }}
      # ---
      - run: cross-env RUSTFLAGS="--deny warnings" cargo build --verbose
        if: (!matrix.unstable-cfg-needed)
      - run: cross-env RUSTFLAGS="--deny warnings" cargo build --all-features --verbose
        if: (!startsWith(matrix.os, 'windows') && !matrix.unstable-cfg-needed)
      - run: cross-env RUSTFLAGS="--cfg portable_io_unstable_all --deny warnings" cargo build --all-features --verbose
        if: (!startsWith(matrix.os, 'windows') && startsWith(matrix.rust, 'nightly'))
      # ---
      - run: cross-env RUSTFLAGS="--deny warnings" cargo test --no-run
        if: (!matrix.unstable-cfg-needed)
      - run: cross-env RUSTFLAGS="--deny warnings" cargo test --all-features --no-run
        if: (!startsWith(matrix.os, 'windows') && !matrix.unstable-cfg-needed)
      - run: cross-env RUSTFLAGS="--cfg portable_io_unstable_all --deny warnings" cargo test --all-features --no-run
        if: (!startsWith(matrix.os, 'windows') && startsWith(matrix.rust, 'nightly'))

  fmt:
    strategy:
      fail-fast: false
      matrix:
        include:
          - rust: stable
          - rust: nightly
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: rustup default ${{ matrix.rust }}
      - run: rustup component add rustfmt
      - run: cargo fmt --check

  doc:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: cargo install cargo-sync-readme
      - run: npm install --global cross-env
      - run: rustup default nightly
      # ---
      - run: echo "use cargo-sync-readme if 'cargo sync-readme --check fails'" && cargo sync-readme --check
      - run: cross-env RUSTDOCFLAGS="--cfg portable_io_unstable_all" cargo doc --all-features
